{
	"GTest: Defines an individual test": {
		"prefix": "TEST",
		"body": [
			"TEST(${1:TestSuiteName}, ${2:TestName}) {",
			"  $0",
			"}"
		],
		"description": "Defines an individual test named `TestName` in the test suite `TestSuiteName`, consisting of the given statements"
	},
	"GTest: Test with fixture": {
		"prefix": "TEST_F",
		"body": [
			"TEST_F(${1:TestFixtureName}, ${2:TestName}) {",
			"  $0",
			"}"
		],
		"description": "Defines an individual test named `TestName` that uses the test fixture class `TestFixtureName`"
	},
	"GTest: Parameterized test": {
		"prefix": "TEST_P",
		"body": [
			"TEST_P(${1:TestFixtureName}, ${2:TestName}) {",
			"  $0",
			"}"
		],
		"description": "Defines an individual value-parameterized test named `TestName` that uses the test fixture class `TestFixtureName`"
	},
	"GTest: Instantiates the value-parameterized test suite": {
		"prefix": "INSTANTIATE_TEST_SUITE_P",
		"body": [
			"INSTANTIATE_TEST_SUITE_P(${1:InstantiationName}, ${2:TestSuiteName}, ${3:param_generator})"
		],
		"description": "Instantiates the value-parameterized test suite TestSuiteName (defined with `TEST_P`)"
	},
	"GTest: Instantiates the value-parameterized test suite with generator": {
		"prefix": "INSTANTIATE_TEST_SUITE_P",
		"body": [
			"INSTANTIATE_TEST_SUITE_P(${1:InstantiationName}, ${2:TestSuiteName}, ${3:param_generator}, ${4|Range,Values,ValuesIn,Bool(),Combine|}$5)$0"
		],
		"description": "Instantiates the value-parameterized test suite `TestSuiteName` (defined with `TEST_P`) with functions that generate the test parameters"
	},
	"GTest: Generator `Range`": {
		"prefix": "Range",
		"body": [
			"Range(${1:begin}, ${2:end}${3: , ${4:step}})"
		],
		"description": "Yields values `{begin, begin+step, begin+step+step, ...}`. The values do not include `end`. `step` defaults to 1"
	},
	"GTest: Generator `Values`": {
		"prefix": "Values",
		"body": [
			"Values(${1:v1}, ${2:v2}, ${3:v3})"
		],
		"description": "Yields values `{v1, v2, ..., vN}`"
	},
	"GTest: Generator `ValuesIn` (container)": {
		"prefix": "ValuesIn",
		"body": [
			"ValuesIn(${1:container})"
		],
		"description": "Yields values from a C-style array, an STL-style container"
	},
	"GTest: Generator `ValuesIn` (range)": {
		"prefix": "ValuesIn",
		"body": [
			"ValuesIn(${1:begin}, ${2:end})"
		],
		"description": "Yields values from a C-style array, an iterator range `[begin, end)`"
	},
	"GTest: Generator `Bool`": {
		"prefix": "Bool",
		"body": [
			"Bool()"
		],
		"description": "Yields sequence `{false, true}`"
	},
	"GTest: Generator `Combine`": {
		"prefix": "Combine",
		"body": [
			"Combine(${1:g1}, ${2:g2}, ${3:g3})"
		],
		"description": "Yields as `std::tuple` n-tuples all combinations (Cartesian product) of the values generated by the given n generators `g1`, `g2`, …, `gN`"
	},
	"GTest: Defines a typed test": {
		"prefix": "TYPED_TEST_SUITE",
		"body": [
			"TYPED_TEST_SUITE(${1:TestFixtureName}, ${2:Types})"
		],
		"description": "Defines a typed test suite based on the test fixture `TestFixtureName`"
	},
	"GTest: Defines an individual typed test": {
		"prefix": "TYPED_TEST",
		"body": [
			"TYPED_TEST(${1:TestSuiteName}, ${2:TestName}) {",
			"  $0",
			"}"
		],
		"description": "Defines an individual typed test named `TestName` in the typed test suite `TestSuiteName`. The test suite must be defined with `TYPED_TEST_SUITE`"
	},
	"GTest: Defines a type-parameterized test suite": {
		"prefix": "TYPED_TEST_SUITE_P",
		"body": [
			"TYPED_TEST_SUITE_P(${1:TestFixtureName})"
		],
		"description": "Defines a type-parameterized test suite based on the test fixture `TestFixtureName`"
	},
	"GTest: Defines an individual type-parameterized test": {
		"prefix": "TYPED_TEST_P",
		"body": [
			"TYPED_TEST_P(${1:TestSuiteName}, ${2:TestName}) {",
			"  $0",
			"}"
		],
		"description": "Defines an individual type-parameterized test named TestName in the type-parameterized test suite `TestSuiteName`. The test suite must be defined with `TYPED_TEST_SUITE_P`"
	},
	"GTest: Registers the type-parameterized tests": {
		"prefix": "REGISTER_TYPED_TEST_SUITE_P",
		"body": [
			"REGISTER_TYPED_TEST_SUITE_P(${1:TestSuiteName}, ${2:TestNames...})"
		],
		"description": "Registers the type-parameterized tests `TestNames...` of the test suite `TestSuiteName`. The test suite and tests must be defined with `TYPED_TEST_SUITE_P` and `TYPED_TEST_P`"
	},
	"GTest: Instantiates the type-parameterized test suite": {
		"prefix": "INSTANTIATE_TYPED_TEST_SUITE_P",
		"body": [
			"INSTANTIATE_TYPED_TEST_SUITE_P(${1:InstantiationName}, ${2:TestSuiteName}, ${3:Types})"
		],
		"description": "Instantiates the type-parameterized test suite `TestSuiteName`. The test suite must be registered with `REGISTER_TYPED_TEST_SUITE_P`"
	},
	"GTest: Declares an individual test as a friend of the class": {
		"prefix": "FRIEND_TEST",
		"body": [
			"FRIEND_TEST(${1:TestSuiteName}, ${2:TestName})"
		],
		"description": "Within a class body, declares an individual test as a friend of the class, enabling the test to access private class members"
	},
	"GTest: Causes the current file name, line number, and the given message": {
		"prefix": "SCOPED_TRACE",
		"body": [
			"SCOPED_TRACE(${1:message})"
		],
		"description": "Causes the current file name, line number, and the given message to be added to the failure message for each assertion failure that occurs in the scope"
	},
	"GTest: Prevents further test execution at runtime": {
		"prefix": "GTEST_SKIP",
		"body": [
			"GTEST_SKIP()"
		],
		"description": "Prevents further test execution at runtime"
	},
	"GTest: Allows the value-parameterized test suite to be uninstantiated": {
		"prefix": "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST",
		"body": [
			"GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(${1:TestSuiteName})"
		],
		"description": "Allows the value-parameterized test suite `TestSuiteName` to be uninstantiated"
	},
	"GMock: Defines a mock method": {
		"prefix": "MOCK_METHOD",
		"body": [
			"MOCK_METHOD({1:return_type}, {2:method_name}, ({3:args...}));"
		],
		"description": "Defines a mock method `method_name` with arguments `(args...)` and return type `return_type` within a mock class"
	},
	"GMock: Defines a mock method with qualifiers": {
		"prefix": "MOCK_METHOD",
		"body": [
			"MOCK_METHOD({1:return_type}, {2:method_name}, ({3:args...}), (${4:specs...}));"
		],
		"description": "Defines a mock method `method_name` with arguments `(args...)` and return type `return_type` within a mock class. The optional fourth parameter `specs...` is a comma-separated list of qualifiers"
	},
	"GMock: Creates an expectation that the method `method_name` of the object `mock_object` is called with arguments that match the given matchers": {
		"prefix": "EXPECT_CALL",
		"body": [
			"EXPECT_CALL(${1:mock_object}, ${2:method_name(matchers...)})"
		],
		"description": "Creates an expectation that the method `method_name` of the object `mock_object` is called with arguments that match the given matchers `matchers...`. `EXPECT_CALL` must precede any code that exercises the mock object"
	},
	"GMock: Defines what happens when the method `method_name` of the object `mock_object` is called with arguments that match the given matchers": {
		"prefix": "ON_CALL",
		"body": [
			"ON_CALL(${1:mock_object}, ${2:method_name(matchers...)})"
		],
		"description": "Defines what happens when the method `method_name` of the object `mock_object` is called with arguments that match the given matchers `matchers...`. Requires a modifier clause to specify the method’s behavior. Does not set any expectations that the method will be called"
	},
	"Assertions: Generates a success": {
		"prefix": "SUCCEED",
		"body": [
			"SUCCEED()"
		],
		"description": "Generates a success. This does not make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution"
	},
	"Assertions: Generates a fatal failure": {
		"prefix": "FAIL",
		"body": [
			"FAIL()"
		],
		"description": "Generates a fatal failure, which returns from the current function"
	},
	"Assertions: Generates a nonfatal failure": {
		"prefix": "ADD_FAILURE",
		"body": [
			"ADD_FAILURE()"
		],
		"description": "Generates a nonfatal failure, which allows the current function to continue running"
	},
	"Assertions: Generates a nonfatal failure at the file and line number specified": {
		"prefix": "ADD_FAILURE_AT",
		"body": [
			"ADD_FAILURE_AT(${1:file_path}, ${2:line_number})"
		],
		"description": "Generates a nonfatal failure at the file and line number specified"
	},
	"Generalized assertions: Verifies that `value` matches the matcher `matcher` (EXPECT_THAT)": {
		"prefix": "EXPECT_THAT",
		"body": [
			"EXPECT_THAT(${1:value}, ${2:matcher})"
		],
		"description": "Verifies that `value` matches the matcher `matcher`"
	},
	"Generalized assertions: Verifies that `value` matches the matcher `matcher` (ASSERT_THAT)": {
		"prefix": "ASSERT_THAT",
		"body": [
			"ASSERT_THAT(${1:value}, ${2:matcher})"
		],
		"description": "Verifies that `value` matches the matcher `matcher`"
	},
	"Boolean conditions: Verifies that `condition` is true (EXPECT_TRUE)": {
		"prefix": "EXPECT_TRUE",
		"body": [
			"EXPECT_TRUE(${1:condition})"
		],
		"description": "Verifies that `condition` is true"
	},
	"Boolean conditions: Verifies that `condition` is true (ASSERT_TRUE)": {
		"prefix": "ASSERT_TRUE",
		"body": [
			"ASSERT_TRUE(${1:condition})"
		],
		"description": "Verifies that `condition` is true"
	},
	"Boolean conditions: Verifies that `condition` is false (EXPECT_FALSE)": {
		"prefix": "EXPECT_FALSE",
		"body": [
			"EXPECT_FALSE(${1:condition})"
		],
		"description": "Verifies that `condition` is false"
	},
	"Boolean conditions: Verifies that `condition` is false (ASSERT_FALSE)": {
		"prefix": "ASSERT_FALSE",
		"body": [
			"ASSERT_FALSE(${1:condition})"
		],
		"description": "Verifies that `condition` is false"
	},
	"Binary comparison: Verifies that `val1==val2` (EXPECT_EQ)": {
		"prefix": "EXPECT_EQ",
		"body": [
			"EXPECT_EQ(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1==val2`"
	},
	"Binary comparison: Verifies that `val1==val2` (ASSERT_EQ)": {
		"prefix": "ASSERT_EQ",
		"body": [
			"ASSERT_EQ(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1==val2`"
	},
	"Binary comparison: Verifies that `val1!=val2` (EXPECT_NE)": {
		"prefix": "EXPECT_NE",
		"body": [
			"EXPECT_NE(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1!=val2`"
	},
	"Binary comparison: Verifies that `val1!=val2` (ASSERT_NE)": {
		"prefix": "ASSERT_NE",
		"body": [
			"ASSERT_NE(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1!=val2`"
	},
	"Binary comparison: Verifies that `val1<val2` (EXPECT_LT)": {
		"prefix": "EXPECT_LT",
		"body": [
			"EXPECT_LT(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1<val2`"
	},
	"Binary comparison: Verifies that `val1<val2` (ASSERT_LT)": {
		"prefix": "ASSERT_LT",
		"body": [
			"ASSERT_LT(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1<val2`"
	},
	"Binary comparison: Verifies that `val1<=val2` (EXPECT_LE)": {
		"prefix": "EXPECT_LE",
		"body": [
			"EXPECT_LE(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1<=val2`"
	},
	"Binary comparison: Verifies that `val1<=val2` (ASSERT_LE)": {
		"prefix": "ASSERT_LE",
		"body": [
			"ASSERT_LE(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1<=val2`"
	},
	"Binary comparison: Verifies that `val1>val2` (EXPECT_GT)": {
		"prefix": "EXPECT_GT",
		"body": [
			"EXPECT_GT(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1>val2`"
	},
	"Binary comparison: Verifies that `val1>val2` (ASSERT_GT)": {
		"prefix": "ASSERT_GT",
		"body": [
			"ASSERT_GT(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1>val2`"
	},
	"Binary comparison: Verifies that `val1>=val2` (EXPECT_GE)": {
		"prefix": "EXPECT_GE",
		"body": [
			"EXPECT_GE(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1>=val2`"
	},
	"Binary comparison: Verifies that `val1>=val2` (ASSERT_GE)": {
		"prefix": "ASSERT_GE",
		"body": [
			"ASSERT_GE(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that `val1>=val2`"
	},
	"String comparison: Verifies that `str1` and `str2` have the same contents (EXPECT_STREQ)": {
		"prefix": "EXPECT_STREQ",
		"body": [
			"EXPECT_STREQ(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that `str1` and `str2` have the same contents"
	},
	"String comparison: Verifies that the two C strings `str1` and `str2` have the same contents (ASSERT_STREQ)": {
		"prefix": "ASSERT_STREQ",
		"body": [
			"ASSERT_STREQ(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that the two C strings `str1` and `str2` have the same contents"
	},
	"String comparison: Verifies that `str1` and `str2` have the different contents (EXPECT_STRNE)": {
		"prefix": "EXPECT_STRNE",
		"body": [
			"EXPECT_STRNE(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that `str1` and `str2` have the different contents"
	},
	"String comparison: Verifies that the two C strings `str1` and `str2` have the different contents (ASSERT_STRNE)": {
		"prefix": "ASSERT_STRNE",
		"body": [
			"ASSERT_STRNE(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that the two C strings `str1` and `str2` have the different contents"
	},
	"String comparison: Verifies that `str1` and `str2` have the same contents, ignoring case (EXPECT_STRCASEEQ)": {
		"prefix": "EXPECT_STRCASEEQ",
		"body": [
			"EXPECT_STRCASEEQ(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that `str1` and `str2` have the same contents, ignoring case"
	},
	"String comparison: Verifies that the two C strings `str1` and `str2` have the same contents, ignoring case (ASSERT_STRCASEEQ)": {
		"prefix": "ASSERT_STRCASEEQ",
		"body": [
			"ASSERT_STRCASEEQ(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that the two C strings `str1` and `str2` have the same contents, ignoring case"
	},
	"String comparison: Verifies that `str1` and `str2` have the different contents, ignoring case (EXPECT_STRCASENE)": {
		"prefix": "EXPECT_STRCASENE",
		"body": [
			"EXPECT_STRCASENE(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that `str1` and `str2` have the different contents, ignoring case"
	},
	"String comparison: Verifies that the two C strings `str1` and `str2` have the different contents, ignoring case (ASSERT_STRCASENE)": {
		"prefix": "ASSERT_STRCASENE",
		"body": [
			"ASSERT_STRCASENE(${1:str1}, ${2:str2})"
		],
		"description": "Verifies that the two C strings `str1` and `str2` have the different contents, ignoring case"
	},
	"Floating-Point comparison: Verifies that the two `float` values are approximately equal (EXPECT_FLOAT_EQ)": {
		"prefix": "EXPECT_FLOAT_EQ",
		"body": [
			"EXPECT_FLOAT_EQ(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that the two `float` values val1 and val2 are approximately equal, to within 4 ULPs from each other"
	},
	"Floating-Point comparison: Verifies that the two `float` values are approximately equal (ASSERT_FLOAT_EQ)": {
		"prefix": "ASSERT_FLOAT_EQ",
		"body": [
			"ASSERT_FLOAT_EQ(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that the two `float` values val1 and val2 are approximately equal, to within 4 ULPs from each other"
	},
	"Floating-Point comparison: Verifies that the two `double` values are approximately equal (EXPECT_DOUBLE_EQ)": {
		"prefix": "EXPECT_DOUBLE_EQ",
		"body": [
			"EXPECT_DOUBLE_EQ(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that the two `double` values val1 and val2 are approximately equal, to within 4 ULPs from each other"
	},
	"Floating-Point comparison: Verifies that the two `double` values are approximately equal (ASSERT_DOUBLE_EQ)": {
		"prefix": "ASSERT_DOUBLE_EQ",
		"body": [
			"ASSERT_DOUBLE_EQ(${1:val1}, ${2:val2})"
		],
		"description": "Verifies that the two `double` values val1 and val2 are approximately equal, to within 4 ULPs from each other"
	},
	"Floating-Point comparison: Verifies that the difference between values does not exceed the absolute error bound (EXPECT_NEAR)": {
		"prefix": "EXPECT_NEAR",
		"body": [
			"EXPECT_NEAR(${1:val1}, ${2:val2}, ${3:abs_error})"
		],
		"description": "Verifies that the difference between `val1` and `val2` does not exceed the absolute error bound `abs_error`"
	},
	"Floating-Point comparison: Verifies that the difference between values does not exceed the absolute error bound (ASSERT_NEAR)": {
		"prefix": "ASSERT_NEAR",
		"body": [
			"ASSERT_NEAR(${1:val1}, ${2:val2}, ${3:abs_error})"
		],
		"description": "Verifies that the difference between `val1` and `val2` does not exceed the absolute error bound `abs_error`"
	},
	"Exception Assertions: Verifies that `statement` throws an exception of type `exception_type` (EXPECT_THROW)": {
		"prefix": "EXPECT_THROW",
		"body": [
			"EXPECT_THROW(${1:statement}, ${2:exception_type})"
		],
		"description": "Verifies that `statement` throws an exception of type `exception_type`"
	},
	"Exception Assertions: Verifies that `statement` throws an exception of type `exception_type` (ASSERT_THROW)": {
		"prefix": "ASSERT_THROW",
		"body": [
			"ASSERT_THROW(${1:statement}, ${2:exception_type})"
		],
		"description": "Verifies that `statement` throws an exception of type `exception_type`"
	},
	"Exception Assertions: Verifies that `statement` throws an exception of any type (EXPECT_ANY_THROW)": {
		"prefix": "EXPECT_ANY_THROW",
		"body": [
			"EXPECT_ANY_THROW(${1:statement})"
		],
		"description": "Verifies that `statement` throws an exception of any type"
	},
	"Exception Assertions: Verifies that `statement` throws an exception of any type (ASSERT_ANY_THROW)": {
		"prefix": "ASSERT_ANY_THROW",
		"body": [
			"ASSERT_ANY_THROW(${1:statement})"
		],
		"description": "Verifies that `statement` throws an exception of any type"
	},
	"Exception Assertions: Verifies that `statement` does not throw any exception (EXPECT_NO_THROW)": {
		"prefix": "EXPECT_NO_THROW",
		"body": [
			"EXPECT_NO_THROW(${1:statement})"
		],
		"description": "Verifies that `statement` does not throw any exception"
	},
	"Exception Assertions: Verifies that `statement` does not throw any exception (ASSERT_NO_THROW)": {
		"prefix": "ASSERT_NO_THROW",
		"body": [
			"ASSERT_NO_THROW(${1:statement})"
		],
		"description": "Verifies that `statement` does not throw any exception"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED1)": {
		"prefix": "EXPECT_PRED1",
		"body": [
			"EXPECT_PRED1(${1:pred}, ${2:val1})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED2)": {
		"prefix": "EXPECT_PRED2",
		"body": [
			"EXPECT_PRED2(${1:pred}, ${2:val1}, ${3:val2}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED3)": {
		"prefix": "EXPECT_PRED3",
		"body": [
			"EXPECT_PRED3(${1:pred}, ${2:val1}, ${3:val2}, ${4:val3}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED4)": {
		"prefix": "EXPECT_PRED4",
		"body": [
			"EXPECT_PRED4(${1:pred}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED5)": {
		"prefix": "EXPECT_PRED5",
		"body": [
			"EXPECT_PRED5(${1:pred}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}, ${6:val5})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED1)": {
		"prefix": "ASSERT_PRED1",
		"body": [
			"ASSERT_PRED1(${1:pred}, ${2:val1})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED2)": {
		"prefix": "ASSERT_PRED2",
		"body": [
			"ASSERT_PRED2(${1:pred}, ${2:val1}, ${3:val2}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED3)": {
		"prefix": "ASSERT_PRED3",
		"body": [
			"ASSERT_PRED3(${1:pred}, ${2:val1}, ${3:val2}, ${4:val3}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED4)": {
		"prefix": "ASSERT_PRED4",
		"body": [
			"ASSERT_PRED4(${1:pred}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED5)": {
		"prefix": "ASSERT_PRED5",
		"body": [
			"ASSERT_PRED5(${1:pred}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}, ${6:val5})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED_FORMAT1)": {
		"prefix": "EXPECT_PRED_FORMAT1",
		"body": [
			"EXPECT_PRED_FORMAT1(${1:pred_formatter}, ${2:val1})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED_FORMAT2)": {
		"prefix": "EXPECT_PRED_FORMAT2",
		"body": [
			"EXPECT_PRED_FORMAT2(${1:pred_formatter}, ${2:val1}, ${3:val2}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED_FORMAT3)": {
		"prefix": "EXPECT_PRED_FORMAT3",
		"body": [
			"EXPECT_PRED_FORMAT3(${1:pred_formatter}, ${2:val1}, ${3:val2}, ${4:val3}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED_FORMAT4)": {
		"prefix": "EXPECT_PRED_FORMAT4",
		"body": [
			"EXPECT_PRED_FORMAT4(${1:pred_formatter}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (EXPECT_PRED_FORMAT5)": {
		"prefix": "EXPECT_PRED_FORMAT5",
		"body": [
			"EXPECT_PRED_FORMAT5(${1:pred_formatter}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}, ${6:val5})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED_FORMAT1)": {
		"prefix": "ASSERT_PRED_FORMAT1",
		"body": [
			"ASSERT_PRED_FORMAT1(${1:pred_formatter}, ${2:val1})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED_FORMAT2)": {
		"prefix": "ASSERT_PRED_FORMAT2",
		"body": [
			"ASSERT_PRED_FORMAT2(${1:pred_formatter}, ${2:val1}, ${3:val2}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED_FORMAT3)": {
		"prefix": "ASSERT_PRED_FORMAT3",
		"body": [
			"ASSERT_PRED_FORMAT3(${1:pred_formatter}, ${2:val1}, ${3:val2}, ${4:val3}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED_FORMAT4)": {
		"prefix": "ASSERT_PRED_FORMAT4",
		"body": [
			"ASSERT_PRED_FORMAT4(${1:pred_formatter}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Exception Assertions: Verifies that the predicate pred returns true when passed the given values as arguments (ASSERT_PRED_FORMAT5)": {
		"prefix": "ASSERT_PRED_FORMAT5",
		"body": [
			"ASSERT_PRED_FORMAT5(${1:pred_formatter}, ${2:val1}, ${3:val2}, ${4:val3}, ${5:val4}, ${6:val5})"
		],
		"description": "Verifies that the predicate pred returns true when passed the given values as arguments"
	},
	"Windows HRESULT Assertions: Verifies that `expression` is a success `HRESULT` (EXPECT_HRESULT_SUCCEEDED)": {
		"prefix": "EXPECT_HRESULT_SUCCEEDED",
		"body": [
			"EXPECT_HRESULT_SUCCEEDED(${1:expression})"
		],
		"description": "Verifies that `expression` is a success `HRESULT`"
	},
	"Windows HRESULT Assertions: Verifies that `expression` is a success `HRESULT` (ASSERT_HRESULT_SUCCEEDED)": {
		"prefix": "ASSERT_HRESULT_SUCCEEDED",
		"body": [
			"ASSERT_HRESULT_SUCCEEDED(${1:expression})"
		],
		"description": "Verifies that `expression` is a success `HRESULT`"
	},
	"Windows HRESULT Assertions: Verifies that `expression` is a failure `HRESULT` (EXPECT_HRESULT_FAILED)": {
		"prefix": "EXPECT_HRESULT_FAILED",
		"body": [
			"EXPECT_HRESULT_FAILED(${1:expression})"
		],
		"description": "Verifies that `expression` is a failure `HRESULT`"
	},
	"Windows HRESULT Assertions: Verifies that `expression` is a failure `HRESULT` (ASSERT_HRESULT_FAILED)": {
		"prefix": "ASSERT_HRESULT_FAILED",
		"body": [
			"ASSERT_HRESULT_FAILED(${1:expression})"
		],
		"description": "Verifies that `expression` is a failure `HRESULT`"
	},
	"Death Assertions: Verifies that `statement` causes the process to terminate with a nonzero exit status and produces `stderr` output that matches `matcher` (EXPECT_DEATH)": {
		"prefix": "EXPECT_DEATH",
		"body": [
			"EXPECT_DEATH(${1:statement}, ${2:matcher})"
		],
		"description": "Verifies that `statement` causes the process to terminate with a nonzero exit status and produces `stderr` output that matches `matcher`"
	},
	"Death Assertions: Verifies that `statement` causes the process to terminate with a nonzero exit status and produces `stderr` output that matches `matcher` (ASSERT_DEATH)": {
		"prefix": "ASSERT_DEATH",
		"body": [
			"ASSERT_DEATH(${1:statement}, ${2:matcher})"
		],
		"description": "Verifies that `statement` causes the process to terminate with a nonzero exit status and produces `stderr` output that matches `matcher`"
	},
	"Death Assertions: If death tests are supported, behaves the same as `EXPECT_DEATH`. Otherwise, verifies nothing. (EXPECT_DEATH_IF_SUPPORTED)": {
		"prefix": "EXPECT_DEATH_IF_SUPPORTED",
		"body": [
			"EXPECT_DEATH_IF_SUPPORTED(${1:statement}, ${2:matcher})"
		],
		"description": "If death tests are supported, behaves the same as `EXPECT_DEATH`. Otherwise, verifies nothing"
	},
	"Death Assertions: If death tests are supported, behaves the same as `EXPECT_DEATH`. Otherwise, verifies nothing. (ASSERT_DEATH_IF_SUPPORTED)": {
		"prefix": "ASSERT_DEATH_IF_SUPPORTED",
		"body": [
			"ASSERT_DEATH_IF_SUPPORTED(${1:statement}, ${2:matcher})"
		],
		"description": "If death tests are supported, behaves the same as `EXPECT_DEATH`. Otherwise, verifies nothing"
	},
	"Death Assertions: In debug mode, behaves the same as `EXPECT_DEATH` (EXPECT_DEBUG_DEATH)": {
		"prefix": "EXPECT_DEBUG_DEATH",
		"body": [
			"EXPECT_DEBUG_DEATH(${1:statement}, ${2:matcher})"
		],
		"description": "In debug mode, behaves the same as `EXPECT_DEATH`. When not in debug mode (i.e. `NDEBUG` is defined), just executes `statement`"
	},
	"Death Assertions: In debug mode, behaves the same as `EXPECT_DEATH` (ASSERT_DEBUG_DEATH)": {
		"prefix": "ASSERT_DEBUG_DEATH",
		"body": [
			"ASSERT_DEBUG_DEATH(${1:statement}, ${2:matcher})"
		],
		"description": "In debug mode, behaves the same as `EXPECT_DEATH`. When not in debug mode (i.e. `NDEBUG` is defined), just executes `statement`"
	},
	"Death Assertions: Verifies that `statement` causes the process to terminate with an exit status that satisfies `predicate`, and produces `stderr` output that matches `matcher` (EXPECT_EXIT)": {
		"prefix": "EXPECT_EXIT",
		"body": [
			"EXPECT_EXIT(${1:statement}, ${2:predicate}, ${3:matcher})"
		],
		"description": "Verifies that `statement` causes the process to terminate with an exit status that satisfies `predicate`, and produces `stderr` output that matches `matcher`"
	},
	"Death Assertions: Verifies that `statement` causes the process to terminate with an exit status that satisfies `predicate`, and produces `stderr` output that matches `matcher` (ASSERT_EXIT)": {
		"prefix": "ASSERT_EXIT",
		"body": [
			"ASSERT_EXIT(${1:statement}, ${2:predicate}, ${3:matcher})"
		],
		"description": "Verifies that `statement` causes the process to terminate with an exit status that satisfies `predicate`, and produces `stderr` output that matches `matcher`"
	}
}